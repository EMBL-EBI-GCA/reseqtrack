package ReseqTrack::Tools::RunVariantCall::RunApplyRecalibration;

use strict;
use warnings;
use vars qw(@ISA);

use ReseqTrack::Tools::Exception qw(throw);
use ReseqTrack::Tools::Argument qw(rearrange);
use File::Basename qw(basename fileparse);
use ReseqTrack::Tools::FileSystemUtils qw( check_file_exists check_executable);
use ReseqTrack::Tools::RunVariantCall;
use ReseqTrack::Tools::GATKTools;
use File::Path;

@ISA = qw(ReseqTrack::Tools::RunVariantCall ReseqTrack::Tools::GATKTools);

=head2 new

  Arg [-tranchesFile]   :
      string, path to tranchesFile generated by VariantRecalibrator
  Arg [-recalFile]   :
      string, path to recalFile generated by VariantRecalibrator      	
  Arg [-parameters_AR]   :
      string, parameters to pass to the RunApplyRecalibration object; if multiple parameters, use this tag multiple times
      
  + Arguments for ReseqTrack::Tools::RunProgram parent class

  Please see GATK ApplyRecalibration website for detailed descriptions about inputs:
  http://www.broadinstitute.org/gsa/gatkdocs/release/org_broadinstitute_sting_gatk_walkers_variantrecalibration_ApplyRecalibration.html

  Function  : Creates a new ReseqTrack::Tools::RunVariantCall::RunApplyRecalibration object.
  Returntype: ReseqTrack::Tools::RunVariantCall::RunApplyRecalibration
  Exceptions: 
  Example   : my $object_AR = ReseqTrack::Tools::RunVariantCall::RunApplyRecalibration->new(
							-program					=> path to program executable,
							-reference 					=> path to sequence reference,
							-input_files				=> path_to_input_vcf_file to be recalibrated,
							-working_dir				=> path_to_output_dir,
							-save_files_from_deletion	=> $input{save_files_from_deletion},
							-tranchesFile				=> path_to_tranchesFile,
							-recalFile					=> path_to_recalFile,
							-parameters_AR				=> {parameter_name=parameter_vale, parameter_name2=parameter_value2},
);

=cut


sub new {

  my ( $class, @args ) = @_;	
  my $gatk_obj = $class->ReseqTrack::Tools::GATKTools::new(@args);
  my $variant_call_obj = $class->ReseqTrack::Tools::RunVariantCall::new(@args);
  my $self = {(%$gatk_obj, %$variant_call_obj)};
  bless $self, $class;

  my (	$parameters_AR,
  		$tranchesFile,
  		$recalFile,
)
    = rearrange( [ qw( 	parameters_AR
    					SAVE_FILES_FROM_DELETION
    					TRANCHESFILE
    					RECALFILE
    				) ], @args);

  
  ### SET DEFAULT
  $self->gatk_path('/nfs/1000g-work/G1K/work/bin/gatk/dist/') if (! $self->gatk_path); #this calls ->program
    
  $self->options($parameters_AR);
  $self->tranchesFile($tranchesFile);
  $self->recalFile($recalFile);
  
  return $self;
}


sub run_program {
    my ($self) = @_; 

    my $input_vcf = $self->input_files; 
    
    check_file_exists($self->reference);
    check_file_exists(@$input_vcf);
    check_file_exists($self->tranchesFile);
    check_file_exists($self->recalFile);
    check_executable($self->java_exe);

    my $cmd = $self->java_exe . ' ' . $self->jvm_args . ' -jar ';
    $cmd .= $self->gatk_path . '/' . $self->jar_file . " \\\n";

    $cmd .= "-T ApplyRecalibration  \\\n";
    $cmd .= "-R " . $self->reference . "  \\\n";

    my $vcf_basename;    
    foreach my $vcf ( @$input_vcf ) { 
        $cmd .= "-input " . $vcf . "  \\\n";
        $vcf_basename = basename($vcf);
    }       
    
    if ( $self->options ) {
        foreach my $p ( keys %{$self->options} ) {
            $cmd .= "-" . $p . " " . $self->options->{$p} . "  \\\n";
        }
    }  
    
    $cmd .= "-tranchesFile " . $self->tranchesFile . " \\\n";
    $cmd .= "-recalFile " . $self->recalFile . " \\\n";
    
    $vcf_basename =~ s/.gz//g;
    $vcf_basename =~ s/.vcf//g;
    
    my $outfile = $self->working_dir . "/" . $vcf_basename . ".vqsr_filtered.vcf";
    
   	$cmd .= "-o $outfile \\\n";
   	
    #print "Running command...........................................\n$cmd\n";
  	
  	$self->output_files($outfile);
 
  	$self->execute_command_line($cmd);
 
  	return $self;    
}    

=head2 tranchesFile
  Arg [1]   : ReseqTrack::Tools::RunVariantCall::RunApplyRecalibration
  Arg [2]   : string, required, tranchesFile used for run ApplyRecalibration
  Function  : accessor method for tranchesFile
  Returntype: string
  Exceptions: n/a
  Example   : my $tranchesFile = $self->tranchesFile;

=cut

sub tranchesFile {
  my ($self, $tranchesFile) = @_;
  if ($tranchesFile) {
    $self->{'tranchesFile'} = $tranchesFile;
  }
  return $self->{'tranchesFile'};
}

=head2 recalFile
  Arg [1]   : ReseqTrack::Tools::RunVariantCall::RunApplyRecalibration
  Arg [2]   : string, required, recalFile used for run ApplyRecalibration
  Function  : accessor method for recalFile
  Returntype: string
  Exceptions: n/a
  Example   : my $recalFile = $self->recalFile;

=cut

sub recalFile {
  my ($self, $recalFile) = @_;
  if ($recalFile) {
    $self->{'recalFile'} = $recalFile;
  }
  return $self->{'recalFile'};
}

1;

=pod

=head1 Example command line  

 java -Xmx3g -jar /nfs/1000g-work/G1K/work/bin/gatk/dist/GenomeAnalysisTK.jar \
   -T ApplyRecalibration \
   -R /nfs/1000g-work/G1K/work/bin/gatk_resource_bundle/human_g1k_v37.fasta  \
   -input /nfs/1000g-work/G1K/work/zheng/snp_calling/gatk/gatk_all_chr20.vcf.gz  \
   --ts_filter_level 99.0 \
   -tranchesFile /nfs/1000g-work/G1K/work/zheng/snp_calling/vqsr/output.tranches \
   -recalFile /nfs/1000g-work/G1K/work/zheng/snp_calling/vqsr/output.recal \
   -o /nfs/1000g-work/G1K/work/zheng/snp_calling/vqsr/gatk_all_chr20.recalibrated.filtered.vcf
