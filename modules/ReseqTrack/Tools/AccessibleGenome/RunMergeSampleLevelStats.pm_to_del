package AccessibleGenome::RunMergeSampleLevelStats;

use strict;
use ReseqTrack::Tools::Exception;
use ReseqTrack::Tools::CollectionUtils;
use ReseqTrack::DBSQL::DBAdaptor;
use File::Basename;
use Getopt::Long;
use ReseqTrack::Tools::Loader::File;
use IPC::System::Simple qw(system);
use ReseqTrack::Tools::Argument qw(rearrange);
use base qw(AccessibleGenome::MergeSampleLevelStats);


sub new {
  my ( $class, @args ) = @_;
  my $self = $class->SUPER::new(@args);
=head
  my (  $merge_list, $merge_fos_list, $fa, $ca ) =
    rearrange(
    [
      qw( MERGE_LIST MERGE_FOS_LIST FA CA)
    ],
    @args
    );
	
	$self->merge_list($merge_list);
	$self->merge_fos_list($merge_fos_list);
	$self->fa($fa);
	$self->ca($ca);	

	print "list is " . $self->merge_list . "\n";
=cut	
	return $self;
}


sub submit_merge_job {
	my ($self) = @_;
	
	$self->db->dbc->disconnect_when_inactive(1);
	
	my $merged_file = $self->working_dir . "/merge/" . $self->collection->name . ".stats.gz";
	print "merged file is $merged_file\n";
	
	my $cmd = $self->program . " --out $merged_file ";
	$cmd .=  "--chrList /nfs/production/reseq-info/work/reference/GRCh38/GRCh38_full_analysis_set_plus_decoy_hla.fa.fai " . join(" ", @{$self->merge_list});  
	
	$self->execute_command_line($cmd) if ($self->goahead);
	
	#print "$cmd\n";
			
	my $exit = $?>>8;
	if ($exit >=1) {
		$self->update_file_type($self->merge_fos_list, "", $self->fa);
	    $self->update_collection_type("ABORTED", $self->ca);
	    throw("merge failed\n"); 
	}    
			
	$self->output_files($merged_file);
	$self->load_file($merged_file);
	$self->update_file_type($self->merge_fos_list, "MERGED", $self->fa);
	$self->update_collection_type("MERGED", $self->ca);
	return $self;
}	

=head
sub merge_list {
 my ( $self, $arg ) = @_;
   $self->{merge_list} = $arg if ( $arg);
 return $self->{merge_list};
}

sub merge_fos_list {
 my ( $self, $arg ) = @_;
   $self->{merge_fos_list} = $arg if ( $arg);
 return $self->{merge_fos_list};
}

sub fa {
 my ( $self, $arg ) = @_;
   $self->{fa} = $arg if ( $arg);
 return $self->{fa};
}

sub ca {
 my ( $self, $arg ) = @_;
   $self->{ca} = $arg if ( $arg);
 return $self->{ca};
}
=cut

return 1;
